const { loadFixture } = require("@nomicfoundation/hardhat-network-helpers");
const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("UpsidedownEngineerFactory contract", function () {

    async function deployUpsidedownEngineerFactoryFixture() {
        const UpsidedownEngineerFactory = await ethers.getContractFactory("UpsidedownEngineerFactory");
        const [owner, addr1] = await ethers.getSigners();
    
        const contract = await UpsidedownEngineerFactory.deploy();
    
        await contract.deployed();
    
        return { contract, owner, addr1 };
    }

    it("Calling hint() should create an error", async function () {
        const { contract } = await loadFixture(deployUpsidedownEngineerFactoryFixture);
        (expect(contract.hint())).to.revertedWith("Try out https://library.dedaub.com/decompile");
    });

    it("deploy() should emit a DeployInstance event", async function () {
        const { contract } = await loadFixture(deployUpsidedownEngineerFactoryFixture);
        (expect(contract.deploy())).to.emit(contract, "DeployInstance");
    });

    it("deploy() should deploy a new UpsidedownEngineer instance", async function () {
        const { contract } = await loadFixture(deployUpsidedownEngineerFactoryFixture);
        const tx = await contract.deploy();
        const receipt = await tx.wait();
        
        const expected_bytecode = "0x6080604052600436106100555760003560e01c8063100000011461005a578063123456781461008d57806313af4035146100a25780634e71e0c8146100c25780638da5cb5b146100d75780638f32d59b1461010f575b600080fd5b34801561006657600080fd5b5061007a6100753660046103e1565b610140565b6040519081526020015b60405180910390f35b6100a061009b3660046103fa565b6101b0565b005b3480156100ae57600080fd5b506100a06100bd36600461041c565b610264565b3480156100ce57600080fd5b506100a06102f5565b3480156100e357600080fd5b506000546100f7906001600160a01b031681565b6040516001600160a01b039091168152602001610084565b34801561011b57600080fd5b506101306000546001600160a01b0316331490565b6040519015158152602001610084565b600060038211156101a1575080600061015a60028361044c565b61016590600161046e565b90505b8181101561019b57905080600281610180818661044c565b61018a919061046e565b610194919061044c565b9050610168565b50919050565b81156101ab575060015b919050565b6101b8610378565b8214156102285760006101ca33610140565b9050808214156101eb57600080546001600160a01b03191633179055505050565b7f7e4c830d27ef9b1819f6c1710f43e650db84477e9efee4c78342793292f56a23600260405161021b9190610494565b60405180910390a1505050565b7f7e4c830d27ef9b1819f6c1710f43e650db84477e9efee4c78342793292f56a2360026040516102589190610494565b60405180910390a15050565b6000546001600160a01b031633146102d65760405162461bcd60e51b815260206004820152602b60248201527f4d617962652074686520636c61696d4f776e6572736869702066756e6374696f60448201526a6e2077696c6c20776f726b60a81b606482015260840160405180910390fd5b600080546001600160a01b0319166001600160a01b0383161790555b50565b600080546001600160a01b031916331781556001546040805163fbf552db60e01b815290516001600160a01b03929092169263fbf552db9260048084019360209390839003909101908290875af1158015610354573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f2919061053c565b60008061038361038a565b5492915050565b6000806040516020016103c3906020808252601290820152712a34329029b7b63aba34b7b71034b9901a1960711b604082015260600190565b60408051601f19818403018152919052805160209091012092915050565b6000602082840312156103f357600080fd5b5035919050565b6000806040838503121561040d57600080fd5b50508035926020909101359150565b60006020828403121561042e57600080fd5b81356001600160a01b038116811461044557600080fd5b9392505050565b60008261046957634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561048f57634e487b7160e01b600052601160045260246000fd5b500190565b600060208083526000845481600182811c9150808316806104b657607f831692505b8583108114156104d457634e487b7160e01b85526022600452602485fd5b8786018381526020018180156104f157600181146105025761052d565b60ff1986168252878201965061052d565b60008b81526020902060005b868110156105275781548482015290850190890161050e565b83019750505b50949998505050505050505050565b60006020828403121561054e57600080fd5b505191905056fea2646970667358221220317b0a43fd3aaea01389813d5da5631f2e493512567663a8f7db717dfa1e1a6664736f6c634300080a0033";
        const deployed_bytecode = await ethers.provider.getCode(receipt.events[0].args[0]);
        expect(deployed_bytecode).to.equal(expected_bytecode);
    })

});
