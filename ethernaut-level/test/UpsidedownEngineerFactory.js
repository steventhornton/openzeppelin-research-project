const { loadFixture } = require("@nomicfoundation/hardhat-network-helpers");
const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("UpsidedownEngineerFactory contract", function () {

    async function deployUpsidedownEngineerFactoryFixture() {
        const UpsidedownEngineerFactory = await ethers.getContractFactory("UpsidedownEngineerFactory");
        const [owner, addr1] = await ethers.getSigners();
    
        const contract = await UpsidedownEngineerFactory.deploy();
    
        await contract.deployed();
    
        return { contract, owner, addr1 };
    }

    it("Calling hint() should create an error", async function () {
        const { contract } = await loadFixture(deployUpsidedownEngineerFactoryFixture);
        (expect(contract.hint())).to.revertedWith("Try out https://library.dedaub.com/decompile");
    });

    it("deploy() should emit a DeployInstance event", async function () {
        const { contract } = await loadFixture(deployUpsidedownEngineerFactoryFixture);
        (expect(contract.deploy())).to.emit(contract, "DeployInstance");
    });

    it("deploy() should deploy a new UpsidedownEngineer instance", async function () {
        const { contract } = await loadFixture(deployUpsidedownEngineerFactoryFixture);
        const tx = await contract.deploy();
        const receipt = await tx.wait();
        
        const expected_bytecode = "0x6080604052600436106100555760003560e01c8063100000011461005a578063123456781461008d57806313af4035146100a25780634e71e0c8146100c25780638da5cb5b146100d75780638f32d59b1461010f575b600080fd5b34801561006657600080fd5b5061007a6100753660046103ca565b610140565b6040519081526020015b60405180910390f35b6100a061009b3660046103e3565b6101b0565b005b3480156100ae57600080fd5b506100a06100bd366004610405565b610262565b3480156100ce57600080fd5b506100a06102f4565b3480156100e357600080fd5b506000546100f7906001600160a01b031681565b6040516001600160a01b039091168152602001610084565b34801561011b57600080fd5b506101306000546001600160a01b0316331490565b6040519015158152602001610084565b600060038211156101a1575080600061015a600283610435565b610165906001610457565b90505b8181101561019b579050806002816101808186610435565b61018a9190610457565b6101949190610435565b9050610168565b50919050565b81156101ab575060015b919050565b6101b8610361565b82036102265760006101c933610140565b90508082036101e957600080546001600160a01b03191633179055505050565b7f7e4c830d27ef9b1819f6c1710f43e650db84477e9efee4c78342793292f56a236003604051610219919061047e565b60405180910390a1505050565b7f7e4c830d27ef9b1819f6c1710f43e650db84477e9efee4c78342793292f56a236002604051610256919061047e565b60405180910390a15050565b6000546001600160a01b031633146102d45760405162461bcd60e51b815260206004820152602b60248201527f4d617962652074686520636c61696d4f776e6572736869702066756e6374696f60448201526a6e2077696c6c20776f726b60a81b606482015260840160405180910390fd5b600080546001600160a01b0383166001600160a01b031990911617905550565b600080546001600160a01b031916331781556001546040805163fbf552db60e01b815290516001600160a01b03929092169263fbf552db9260048084019382900301818387803b15801561034757600080fd5b505af115801561035b573d6000803e3d6000fd5b50505050565b60008061036c610373565b5492915050565b6000806040516020016103ac906020808252601290820152712a34329029b7b63aba34b7b71034b9901a1960711b604082015260600190565b60408051601f19818403018152919052805160209091012092915050565b6000602082840312156103dc57600080fd5b5035919050565b600080604083850312156103f657600080fd5b50508035926020909101359150565b60006020828403121561041757600080fd5b81356001600160a01b038116811461042e57600080fd5b9392505050565b60008261045257634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561047857634e487b7160e01b600052601160045260246000fd5b92915050565b600060208083526000845481600182811c9150808316806104a057607f831692505b85831081036104bd57634e487b7160e01b85526022600452602485fd5b8786018381526020018180156104da57600181146104f05761051b565b60ff198616825284151560051b8201965061051b565b60008b81526020902060005b86811015610515578154848201529085019089016104fc565b83019750505b5094999850505050505050505056fea2646970667358221220a4482830d1b24542beaced635c95dbfd1becacfc84b0e55d24f051344ef038d064736f6c63430008110033";
        const deployed_bytecode = await ethers.provider.getCode(receipt.events[0].args[0]);
        expect(deployed_bytecode).to.equal(expected_bytecode);
    })

});
